class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
  //selection sort
       int l=nums.size();
       for(int i=0;i<l;i++){
           int minIdx=i;
           for(int j=i+1;j<l;j++){
               if(nums[j]<nums[minIdx]){
                   minIdx=j;
               }
           }
           swap(nums[i],nums[minIdx]);
       }
       return nums;
//bubble sort
    int n=nums.size();
      for(int i=0;i<n-1;i++){
          bool isSwap=false;
          for(int j=0;j<n-i-1;j++){
              if(nums[j]>nums[j+1]){
              swap(nums[j],nums[j+1]);
              isSwap=true;
              }
          }
          if(!isSwap)break;
      } 
       return nums;
//insertion sort
 int n=nums.size();
      for(int i=0;i<n;i++){
            int j=i;
            while(j>0 && nums[j]<nums[j-1]){
                     swap(nums[j],nums[j-1]);
                      j--;
            }
      }
       return nums;
//merge sort
 vector<int> temp;
        int left=low,right=mid+1;
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
               temp.push_back(arr[left++]);
            }else{
                temp.push_back(arr[right++]);
            }
        }
        while(left<=mid){
            temp.push_back(arr[left++]);
        }
        while(right<=high){
            temp.push_back(arr[right++]);
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp[i-low];
        }
    }
    void mergeSort(vector<int> &nums,int l,int h){
        if(l>=h)return;
        int mid=l+(h-l)/2;
        mergeSort(nums,l,mid);
        mergeSort(nums,mid+1,h);
        merge(nums,l,mid,h);
    }
    vector<int> sortArray(vector<int>& nums) {
      int l=nums.size();
      mergeSort(nums,0,l-1);
      return nums;
    }
};
